scilla_version 0
import IntUtils
library LiquiShareTracker

(***************************************************)
(*               Associated library                *)
(***************************************************)

let uint128_zero = Uint128 0

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let true = True
(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeNotOwner

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeNotOwner              => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }

let zero = Uint128 0

(* map contract to nested map of nftid => address
assumes both zrc2 token address, and nft Id are unique
*)



(* map the byte strings to the totalsupply *)

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract LiquiShareTracker
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  init_supply : Uint128,
  burn_addr : ByStr20
)


(* Mutable fields *)
(*map unique nftid to nftshare FT address, and num of FT shares *)
field nftsharesaddress : Map Uint256 ByStr20 = Emp Uint256 ByStr20
field nftid_used : Map Uint256 Bool = Emp Uint256 Bool
field num_shares : Map Uint256 Uint128 = Emp Uint256 Uint128
field num_shares2 : Map ByStr20 Uint128 = Emp ByStr20 Uint128

field nftaddr : Map ByStr20 ByStr20 = Emp ByStr20 ByStr20
field nftid : Map ByStr20 Uint256 = Emp ByStr20 Uint256


(*map unique FT address to internal balance *)
field tokbalance : Map ByStr20 Uint128 = Emp ByStr20 Uint128

(*map unique FT address to sender*)
field ftsender : Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

field balances: Map ByStr20 Uint128
  = let emp_map = Emp ByStr20 Uint128 in
    builtin put emp_map contract_owner init_supply

field allowances: Map ByStr20 (Map ByStr20 Uint128)
  = Emp ByStr20 (Map ByStr20 Uint128)

(* keep track of tokens minted for a given NFT_ID - uint ID -> uint supply mapping *)
field ftused : Map ByStr20 Bool = Emp ByStr20 Bool

field isRedeemed : Map ByStr20 Bool = Emp ByStr20 Bool



(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(address: ByStr20)
  is_owner = builtin eq contract_owner address;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure AcceptFunds(contractaddr: ByStr20, from: ByStr20)
    accept
   end


procedure AcceptNFT(from : ByStr20, token_id : Uint256)
  accept
 end



(* transfer NFT from _sender to this contract) *)
procedure LiqNFTdeposit(nftaddress: ByStr20, tokenid: Uint256)
    (*msg1 = { _tag : "SetApprove"; _amount : Uint128 0; _recipient : nftaddress; to : _this_address; token_id : tokenid};*)
    msg1 = { _tag : "TransferFrom"; _amount : Uint128 0; _recipient : nftaddress; to : _this_address; token_id : tokenid};
    (*msgs = two_msgs msg1 msg2;*)
    msgs = one_msg msg1;
    send msgs
  end

(* transfer ZRC2 shares from user to contract/ burn address, at time of redemption *)
procedure TransferZRC2(
  sender : ByStr20,
  receiver : ByStr20,
  token_amount : Uint128,
  token_address : ByStr20
  )
  (*msg1 = { _tag : "IncreaseAllowance"; _amount : Uint128 0; _recipient: token_address; amount : token_amount; spender : _this_address };*)
  msg_to_token = {
    _tag : "TransferFrom";
    _recipient: token_address;
    _amount: zero;
    from: sender;
    to: receiver;
    amount: token_amount
  };
  (*msgs = two_msgs msg1 msg_to_token;*)
  msgs = one_msg msg_to_token;
  send msgs
end


procedure LiqNFTredeem(nftaddress: ByStr20, tokenid: Uint256, sendingaddr: ByStr20)
    msg1 = { _tag : "Transfer"; _recipient : nftaddress; _amount : Uint128 0; to : sendingaddr; token_id : tokenid};
    msgs = one_msg msg1;
    send msgs
  end

(* transfer NFT from this contract to _sender) *)
procedure LiqNFTredeem2(nftaddress: ByStr20, tokenid: Uint256, destination: ByStr20)
  transfer_to_user = {
        _tag: "TransferFrom";
        _recipient: nftaddress;
        _amount: uint128_zero;
        to: destination;
        token_id: tokenid
        };
      msgs = one_msg transfer_to_user;
      send msgs
  end

(***************************************)
(*             Transitions             *)
(***************************************)

transition RecipientAcceptTransfer(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
(*ftaddr <- _sender;*)
tokbalance[_sender]:=amount;
ftsender[_sender]:=sender
end

transition TransferFromSuccessCallBack2(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition TransferSuccessCallBack(
  from : ByStr20,
  token_id : Uint256,
  recipient : ByStr20
)
end

transition TransferDemo(
  receiver : ByStr20,
  token_amount : Uint128,
  token_address : ByStr20
  )
  msg_to_token = {
    _tag : "TransferFrom";
    _recipient: token_address;
    _amount: zero;
    from: _sender;
    to: receiver;
    amount: token_amount
  };
  msgs = one_msg msg_to_token;
  send msgs
end

transition SetApproveSuccessCallback(
  to : ByStr20,
  token_id : Uint256
)
end

transition RecipientAcceptTransferFrom(from : ByStr20, token_id : Uint256, recipient : ByStr20)
    AcceptNFT from token_id
end

transition TransferFromSuccessCallBack(from : ByStr20, token_id : Uint256, recipient : ByStr20)
    AcceptNFT from token_id
end


(* link deposited NFT to N shares of a specified FT*)
transition Deposit_and_link(nfttokenAddress: ByStr20, tokenid: Uint256, numshares: Uint128, fractionalshare: ByStr20)
    recipient = _sender;
    num_shares[tokenid]:=numshares;
    num_shares2[fractionalshare]:=numshares;
    nftid[fractionalshare]:=tokenid;
    nftaddr[fractionalshare]:=nfttokenAddress;
    nftsharesaddress[tokenid]:=fractionalshare;
    is_used <- ftused[fractionalshare];
    ftused[fractionalshare]:=true;
    match is_used with
        | Some x =>
        err = CodeIsSender;
        ThrowError err
        | None =>
        LiqNFTdeposit nfttokenAddress tokenid
      end
  end

transition move_tokens(fttokenaddress: ByStr20, numtokens: Uint128, recipient: ByStr20)
    TransferZRC2 burn_addr recipient numtokens fttokenaddress
end


(*
transition redeem(nfttokenAddress: ByStr20, tokenid: Uint256)
    recipient = _sender;
    LiqNFTredeem nfttokenAddress tokenid recipient
end
*)



transition return_and_redeem(nfttokenAddress: ByStr20, tokenid: Uint256)
      recipient = _sender;
    (*AuthorizedBurnIfSufficientBalance recipient amount; *)
    (*zrc2 tokaddress for fractional shares *)
    tokaddress <- nftsharesaddress[tokenid];
    toksupply <- num_shares[tokenid];
    match toksupply with
    | Some v =>
      validtokens = v;
      match tokaddress with
      | Some z =>
          TransferZRC2 burn_addr _this_address validtokens z;
          LiqNFTredeem nfttokenAddress tokenid recipient
      | None =>
      validtokens = Uint128 0
      end
    | None =>
      validtokens = Uint128 0
    end
end


transition check_and_redeem(nfttokenAddress: ByStr20, tokenid: Uint256, fraxshare: ByStr20)
    recipient = _sender;
    taddr = fraxshare;
    toksupply <- num_shares2[taddr];
    toksender <- ftsender[taddr];
    intbal <- tokbalance[taddr];
    match toksender with
      | Some tsender =>
        is_sender = builtin eq tsender _sender;
        match intbal with
        | Some v =>
          match toksupply with
          | Some z =>
            is_redeemable = builtin eq v z;
            match is_sender with
            | True =>
              match is_redeemable with
              | True => LiqNFTredeem nfttokenAddress tokenid recipient;
                      isRedeemed[taddr]:=true
              | False =>
              end
            | False =>
            end
          | None =>
          end
        | None =>
        end
      | None =>
        end
  end
